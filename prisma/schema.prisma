// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = "mysql://teste:teste@localhost:3306/tcc"
}

model Master {
  id       Int    @id @default(autoincrement())
  name     String
  email    String @unique
  password String
}

model Store {
  id                 Int                  @id @default(autoincrement())
  name               String
  localization       String
  creation_date      DateTime
  maxPoints          Int
  Cooperator         Cooperator[]
  Product            Product[]
  Client_Appointment Client_Appointment[]
  Client             Client[]
  Appointment        Appointment[]
}

model Cooperator {
  id      Int     @id @default(autoincrement())
  name    String
  email   String  @unique
  cpf     String
  active  Boolean
  admin   Boolean
  storeId Int
  Store   Store   @relation(fields: [storeId], references: [id])

  password            String
  Points_solicitation Points_solicitation[]
}

model Category {
  id      Int       @id @default(autoincrement())
  name    String
  Product Product[]
}

model Product {
  id          Int    @id @default(autoincrement())
  name        String
  description String
  photo       String

  categoryId Int
  Category   Category   @relation(fields: [categoryId], references: [id])
  value      Int
  quantity   Int
  storeId    Int
  Store      Store      @relation(fields: [storeId], references: [id])
  Purchase   Purchase[]
}

model Appointment {
  id                 Int                  @id @default(autoincrement())
  appointment_date   DateTime
  spots              Int
  storeId            Int
  Store              Store                @relation(fields: [storeId], references: [id])
  Client_Appointment Client_Appointment[]
}

model Purchase {
  id                   Int                @id @default(autoincrement())
  client_AppointmentId Int
  Client_Appointment   Client_Appointment @relation(fields: [client_AppointmentId], references: [id])
  productId            Int
  Product              Product            @relation(fields: [productId], references: [id])
  quantity             Int
}

model Client {
  id                  Int                   @id @default(autoincrement())
  name                String
  email               String                @unique
  phone               String
  cpf                 String
  cep                 String
  storeId             Int
  Store               Store                 @relation(fields: [storeId], references: [id])
  password            String
  points              Int
  Points_solicitation Points_solicitation[]
  Client_Appointment  Client_Appointment[]
}

model Points_solicitation {
  id                     Int        @id @default(autoincrement())
  clientId               Int
  Client                 Client     @relation(fields: [clientId], references: [id])
  quantity               Int
  request_date           DateTime
  status                 String
  employeeId             Int
  Cooperator             Cooperator @relation(fields: [employeeId], references: [id])
  client_justification   String
  employee_justification String
}

model Client_Appointment {
  id            Int         @id @default(autoincrement())
  clientId      Int
  Client        Client      @relation(fields: [clientId], references: [id])
  appointmentId Int
  Appointment   Appointment @relation(fields: [appointmentId], references: [id])
  delivered     Boolean
  Purchase      Purchase[]
  Store         Store?      @relation(fields: [storeId], references: [id])
  storeId       Int?
}
